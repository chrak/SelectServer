// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGINACK_PACKETS_H_
#define FLATBUFFERS_GENERATED_LOGINACK_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct LoginAck;

enum ResultType {
  ResultType_RESULT_SUCCESS = 0,
  ResultType_RESULT_FAILED = 1,
  ResultType_MIN = ResultType_RESULT_SUCCESS,
  ResultType_MAX = ResultType_RESULT_FAILED
};

inline const ResultType (&EnumValuesResultType())[2] {
  static const ResultType values[] = {
    ResultType_RESULT_SUCCESS,
    ResultType_RESULT_FAILED
  };
  return values;
}

inline const char * const *EnumNamesResultType() {
  static const char * const names[] = {
    "RESULT_SUCCESS",
    "RESULT_FAILED",
    nullptr
  };
  return names;
}

inline const char *EnumNameResultType(ResultType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesResultType()[index];
}

struct LoginAck FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SERIAL = 4,
    VT_ID = 6,
    VT_RESULT = 8
  };
  int32_t serial() const {
    return GetField<int32_t>(VT_SERIAL, 0);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  ResultType result() const {
    return static_cast<ResultType>(GetField<int8_t>(VT_RESULT, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SERIAL) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_RESULT) &&
           verifier.EndTable();
  }
};

struct LoginAckBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_serial(int32_t serial) {
    fbb_.AddElement<int32_t>(LoginAck::VT_SERIAL, serial, 0);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LoginAck::VT_ID, id);
  }
  void add_result(ResultType result) {
    fbb_.AddElement<int8_t>(LoginAck::VT_RESULT, static_cast<int8_t>(result), 0);
  }
  explicit LoginAckBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LoginAckBuilder &operator=(const LoginAckBuilder &);
  flatbuffers::Offset<LoginAck> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoginAck>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginAck> CreateLoginAck(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t serial = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    ResultType result = ResultType_RESULT_SUCCESS) {
  LoginAckBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_serial(serial);
  builder_.add_result(result);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginAck> CreateLoginAckDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t serial = 0,
    const char *id = nullptr,
    ResultType result = ResultType_RESULT_SUCCESS) {
  return packets::CreateLoginAck(
      _fbb,
      serial,
      id ? _fbb.CreateString(id) : 0,
      result);
}

inline const packets::LoginAck *GetLoginAck(const void *buf) {
  return flatbuffers::GetRoot<packets::LoginAck>(buf);
}

inline const packets::LoginAck *GetSizePrefixedLoginAck(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<packets::LoginAck>(buf);
}

inline bool VerifyLoginAckBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<packets::LoginAck>(nullptr);
}

inline bool VerifySizePrefixedLoginAckBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<packets::LoginAck>(nullptr);
}

inline void FinishLoginAckBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<packets::LoginAck> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLoginAckBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<packets::LoginAck> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_LOGINACK_PACKETS_H_
