// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGEREQ_PACKETS_H_
#define FLATBUFFERS_GENERATED_MESSAGEREQ_PACKETS_H_

#include "flatbuffers/flatbuffers.h"

namespace packets {

struct MessageReq;

struct MessageReq FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USERID = 4,
    VT_MESSAGE = 6
  };
  int32_t userId() const {
    return GetField<int32_t>(VT_USERID, 0);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_USERID) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct MessageReqBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_userId(int32_t userId) {
    fbb_.AddElement<int32_t>(MessageReq::VT_USERID, userId, 0);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(MessageReq::VT_MESSAGE, message);
  }
  explicit MessageReqBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageReqBuilder &operator=(const MessageReqBuilder &);
  flatbuffers::Offset<MessageReq> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MessageReq>(end);
    return o;
  }
};

inline flatbuffers::Offset<MessageReq> CreateMessageReq(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t userId = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  MessageReqBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_userId(userId);
  return builder_.Finish();
}

inline flatbuffers::Offset<MessageReq> CreateMessageReqDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t userId = 0,
    const char *message = nullptr) {
  return packets::CreateMessageReq(
      _fbb,
      userId,
      message ? _fbb.CreateString(message) : 0);
}

inline const packets::MessageReq *GetMessageReq(const void *buf) {
  return flatbuffers::GetRoot<packets::MessageReq>(buf);
}

inline const packets::MessageReq *GetSizePrefixedMessageReq(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<packets::MessageReq>(buf);
}

inline bool VerifyMessageReqBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<packets::MessageReq>(nullptr);
}

inline bool VerifySizePrefixedMessageReqBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<packets::MessageReq>(nullptr);
}

inline void FinishMessageReqBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<packets::MessageReq> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageReqBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<packets::MessageReq> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace packets

#endif  // FLATBUFFERS_GENERATED_MESSAGEREQ_PACKETS_H_
